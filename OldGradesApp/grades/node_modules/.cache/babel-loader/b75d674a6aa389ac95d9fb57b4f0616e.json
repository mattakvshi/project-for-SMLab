{"remainingRequest":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/babel-loader/lib/index.js!/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/eslint-loader/index.js??ref--13-0!/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/src/services/RequestExecutor.js","dependencies":[{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/src/services/RequestExecutor.js","mtime":1713246189137},{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/cache-loader/dist/cjs.js","mtime":1713025955242},{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/babel-loader/lib/index.js","mtime":1713025957998},{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/eslint-loader/index.js","mtime":1713025955414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL21hdHRha3ZzaGkvRG9jdW1lbnRzL1Z1ZSBwcm9qZWN0L1NNTGFiUHJvamVjdC9PbGRHcmFkZXNBcHAvZ3JhZGVzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvbWF0dGFrdnNoaS9Eb2N1bWVudHMvVnVlIHByb2plY3QvU01MYWJQcm9qZWN0L09sZEdyYWRlc0FwcC9ncmFkZXMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9ob21lL21hdHRha3ZzaGkvRG9jdW1lbnRzL1Z1ZSBwcm9qZWN0L1NNTGFiUHJvamVjdC9PbGRHcmFkZXNBcHAvZ3JhZGVzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvbWF0dGFrdnNoaS9Eb2N1bWVudHMvVnVlIHByb2plY3QvU01MYWJQcm9qZWN0L09sZEdyYWRlc0FwcC9ncmFkZXMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKg0KICog0KDQtdCw0LvQuNC30LDRhtC40Y8gSFRUUC3QutC70LjQtdC90YLQsCAo0LLQvNC10YHRgtC+IGF4aW9zKS4NCiAqINC80LXRgtC+0LTRizogZ2V0LCBwb3N0LCBwdXQsIGRlbGV0ZQ0KICogQHRoaXMgYmFzZVVybCAtINCx0LDQt9C+0LLRi9C5IHVybCAtIGFwaS8ocmVzdCBycGMgY3Vyc29yKS9zY2hlbWEvcGFja2FnZS8NCiAqIEB0aGlzIGxvYWRpbmdNYXNrIC0g0YTQu9Cw0LMsINCy0LrQuy/QstGL0LrQuyDQvNCw0YHQutGDDQogKi8KaW1wb3J0IHN0b3JlIGZyb20gJ0Avc3RvcmUnOwp2YXIgSU5JVCA9IHsKICBoZWFkZXJzOiB7CiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcKICB9Cn07Cgp2YXIgUmVxdWVzdEV4ZWN1dG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvL1RPRE86IENhbmNlbCByZXF1ZXN0CiAgZnVuY3Rpb24gUmVxdWVzdEV4ZWN1dG9yKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3RFeGVjdXRvcik7CgogICAgdGhpcy5iYXNlVXJsID0gJyc7CiAgICB0aGlzLmxvYWRpbmdNYXNrID0gdHJ1ZTsgLy/QvtGC0LrQu9GO0YfQsNGC0YwsINC10YHQu9C4INC90LUg0YLRgNC10LHRg9C10YLRgdGPINCz0LvQvtCx0LDQu9GM0L3QsNGPINC80LDRgdC60LAKCiAgICBjb25zb2xlLmluZm8oJ1JlcXVlc3QgRXhlY3V0b3IgSW5pdCEnKTsKICB9CiAgLyoqDQogICAqIEdFVA0KICAgKg0KICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgKiBAcGFyYW0ge251bWJlcn0gY29kZSDQmtC+0LQsINC10YHQu9C4INC10YHRgtGMLg0KICAgKiBAcmV0dXJuIHtQcm9taXNlfQ0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhSZXF1ZXN0RXhlY3V0b3IsIFt7CiAgICBrZXk6ICJnZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldCh1cmwsIGNvZGUpIHsKICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShjb2RlID8gdXJsICsgJy8nICsgY29kZSA6IHVybCwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAnR0VUJwogICAgICB9KSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBQT1NUDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhINCe0LHRitC10LrRgiDRgSDQtNCw0L3QvdGL0LzQuC4g0JHRg9C00LXRgiDQv9C+0LzQtdGJ0ZHQvSDQsiDRgtC10LvQviDQt9Cw0L/RgNC+0YHQsC4NCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJwb3N0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0KHVybCwgZGF0YSkgewogICAgICByZXR1cm4gdGhpcy5leGVjdXRlKHVybCwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcKICAgICAgfSksIGRhdGEpOwogICAgfQogICAgLyoqDQogICAgICogUFVUDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlINCa0L7QtC4NCiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSDQntCx0YrQtdC60YIg0YEg0LTQsNC90L3Ri9C80LguINCR0YPQtNC10YIg0L/QvtC80LXRidGR0L0g0LIg0YLQtdC70L4g0LfQsNC/0YDQvtGB0LAuDQogICAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicHV0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwdXQodXJsLCBjb2RlLCBkYXRhKSB7CiAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUodXJsICsgJy8nICsgY29kZSwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAnUFVUJwogICAgICB9KSwgZGF0YSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBERUxFVEUNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgRW5kcG9pbnQuDQogICAgICogQHBhcmFtIHtudW1iZXJ9IGNvZGUg0JrQvtC0Lg0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSh1cmwsIGNvZGUpIHsKICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh1cmwgKyAnLycgKyBjb2RlLCBmYWxzZSwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBJTklUKSwge30sIHsKICAgICAgICBtZXRob2Q6ICdERUxFVEUnCiAgICAgIH0pKTsKICAgIH0KICAgIC8qKg0KICAgICAqIEVYRUNVVEUNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgRW5kcG9pbnQuDQogICAgICogQHBhcmFtIHtib29sZWFufSBleGFjdCDQvdC1INC/0L7QtNGB0YLQsNCy0LvRj9GC0YwgYmFzZVVybA0KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbml0INC/0LDRgNCw0LzQtdGC0YDRiyDQt9Cw0L/RgNC+0YHQsA0KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhINGC0LXQu9C+INC30LDQv9GA0L7RgdCwDQogICAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZXhlY3V0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2V4ZWN1dGUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodXJsLCBleGFjdCwgaW5pdCwgZGF0YSkgewogICAgICAgIHZhciBsb2NhdGlvbiwgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKHRoaXMubG9hZGluZ01hc2spIHN0b3JlLmNvbW1pdCgnc2V0SXNMb2FkaW5nJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIGlmIChkYXRhKSBpbml0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpbml0KSwge30sIHsKICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbG9jYXRpb24gPSBleGFjdCA/IHVybCA6IHRoaXMuYmFzZVVybCArIHVybDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGxvY2F0aW9uLCBpbml0KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dC5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfY29udGV4dC50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBzdG9yZS5jb21taXQoJ3NldElzTG9hZGluZycsIGZhbHNlKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMTYpOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1sxLCAxMiwgMTYsIDE5XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBleGVjdXRlKF94LCBfeDIsIF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF9leGVjdXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBleGVjdXRlOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gUmVxdWVzdEV4ZWN1dG9yOwp9KCk7CgpleHBvcnQgZGVmYXVsdCBuZXcgUmVxdWVzdEV4ZWN1dG9yKCk7"},{"version":3,"sources":["/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/src/services/RequestExecutor.js"],"names":["store","INIT","headers","RequestExecutor","baseUrl","loadingMask","console","info","url","code","execute","method","data","exact","init","commit","body","JSON","stringify","location","fetch","response","json","error","Error"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,IAAMC,IAAI,GAAG;AACZC,EAAAA,OAAO,EAAE;AACR,oBAAgB;AADR;AADG,CAAb;;IAMMC,e;AACL;AACA,6BAAc;AAAA;;AACb,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmB,IAAnB,CAFa,CAEY;;AACzBC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;WAEC,aAAIC,GAAJ,EAASC,IAAT,EAAe;AACd,aAAO,KAAKC,OAAL,CAAaD,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYC,IAAf,GAAsBD,GAAvC,EAA4C,KAA5C,kCACHP,IADG;AAENU,QAAAA,MAAM,EAAE;AAFF,SAAP;AAIA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WAEC,cAAKH,GAAL,EAAUI,IAAV,EAAgB;AACf,aAAO,KAAKF,OAAL,CAAaF,GAAb,EAAkB,KAAlB,kCAA8BP,IAA9B;AAAoCU,QAAAA,MAAM,EAAE;AAA5C,UAAsDC,IAAtD,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAEC,aAAIJ,GAAJ,EAASC,IAAT,EAAeG,IAAf,EAAqB;AACpB,aAAO,KAAKF,OAAL,CACNF,GAAG,GAAG,GAAN,GAAYC,IADN,EAEN,KAFM,kCAGDR,IAHC;AAGKU,QAAAA,MAAM,EAAE;AAHb,UAINC,IAJM,CAAP;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WAEC,iBAAOJ,GAAP,EAAYC,IAAZ,EAAkB;AACjB,aAAO,KAAKC,OAAL,CAAaF,GAAG,GAAG,GAAN,GAAYC,IAAzB,EAA+B,KAA/B,kCAA2CR,IAA3C;AAAiDU,QAAAA,MAAM,EAAE;AAAzD,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6EAEC,iBAAcH,GAAd,EAAmBK,KAAnB,EAA0BC,IAA1B,EAAgCF,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,oBAAI,KAAKP,WAAT,EAAsBL,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6B,IAA7B;AADvB;AAIE,oBAAIH,IAAJ,EAAUE,IAAI,mCAAQA,IAAR;AAAcE,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAApB,kBAAJ;AAEJO,gBAAAA,QANR,GAMmBN,KAAK,GAAGL,GAAH,GAAS,KAAKJ,OAAL,GAAeI,GANhD;AAAA;AAAA,uBAOyBY,KAAK,CAACD,QAAD,EAAWL,IAAX,CAP9B;;AAAA;AAOQO,gBAAAA,QAPR;AAAA;AAAA,uBAUeA,QAAQ,CAACC,IAAT,EAVf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYEhB,gBAAAA,OAAO,CAACiB,KAAR;AAZF,sBAaQ,IAAIC,KAAJ,aAbR;;AAAA;AAAA;AAeExB,gBAAAA,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6B,KAA7B;AAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAoBD,eAAe,IAAIZ,eAAJ,EAAf","sourcesContent":["/**\r\n * Реализация HTTP-клиента (вместо axios).\r\n * методы: get, post, put, delete\r\n * @this baseUrl - базовый url - api/(rest rpc cursor)/schema/package/\r\n * @this loadingMask - флаг, вкл/выкл маску\r\n */\r\nimport store from '@/store';\r\n\r\nconst INIT = {\r\n\theaders: {\r\n\t\t'Content-Type': 'application/json;charset=utf-8',\r\n\t},\r\n};\r\n\r\nclass RequestExecutor {\r\n\t//TODO: Cancel request\r\n\tconstructor() {\r\n\t\tthis.baseUrl = '';\r\n\t\tthis.loadingMask = true; //отключать, если не требуется глобальная маска\r\n\t\tconsole.info('Request Executor Init!');\r\n\t}\r\n\r\n\t/**\r\n\t * GET\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {number} code Код, если есть.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tget(url, code) {\r\n\t\treturn this.execute(code ? url + '/' + code : url, false, {\r\n\t\t\t...INIT,\r\n\t\t\tmethod: 'GET',\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * POST\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {object} data Объект с данными. Будет помещён в тело запроса.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tpost(url, data) {\r\n\t\treturn this.execute(url, false, { ...INIT, method: 'POST' }, data);\r\n\t}\r\n\r\n\t/**\r\n\t * PUT\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {number} code Код.\r\n\t * @param {object} data Объект с данными. Будет помещён в тело запроса.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tput(url, code, data) {\r\n\t\treturn this.execute(\r\n\t\t\turl + '/' + code,\r\n\t\t\tfalse,\r\n\t\t\t{ ...INIT, method: 'PUT' },\r\n\t\t\tdata\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * DELETE\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {number} code Код.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tdelete(url, code) {\r\n\t\treturn this.execute(url + '/' + code, false, { ...INIT, method: 'DELETE' });\r\n\t}\r\n\r\n\t/**\r\n\t * EXECUTE\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {boolean} exact не подставлять baseUrl\r\n\t * @param {object} init параметры запроса\r\n\t * @param {object} data тело запроса\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tasync execute(url, exact, init, data) {\r\n\t\tif (this.loadingMask) store.commit('setIsLoading', true);\r\n\r\n\t\ttry {\r\n\t\t\tif (data) init = { ...init, body: JSON.stringify(data) };\r\n\r\n\t\t\tconst location = exact ? url : this.baseUrl + url;\r\n\t\t\tconst response = await fetch(location, init);\r\n\t\t\t//if(!response.ok) throw new Error(\"Network error!\");\r\n\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tthrow new Error(error);\r\n\t\t} finally {\r\n\t\t\tstore.commit('setIsLoading', false);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default new RequestExecutor();\r\n"]}]}