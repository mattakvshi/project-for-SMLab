{"remainingRequest":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/babel-loader/lib/index.js!/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/eslint-loader/index.js??ref--13-0!/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/src/services/RequestExecutor.js","dependencies":[{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/src/services/RequestExecutor.js","mtime":1713079932729},{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/cache-loader/dist/cjs.js","mtime":1713025955242},{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/babel-loader/lib/index.js","mtime":1713025957998},{"path":"/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/node_modules/eslint-loader/index.js","mtime":1713025955414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL21hdHRha3ZzaGkvRG9jdW1lbnRzL1Z1ZSBwcm9qZWN0L1NNTGFiUHJvamVjdC9PbGRHcmFkZXNBcHAvZ3JhZGVzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvbWF0dGFrdnNoaS9Eb2N1bWVudHMvVnVlIHByb2plY3QvU01MYWJQcm9qZWN0L09sZEdyYWRlc0FwcC9ncmFkZXMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9ob21lL21hdHRha3ZzaGkvRG9jdW1lbnRzL1Z1ZSBwcm9qZWN0L1NNTGFiUHJvamVjdC9PbGRHcmFkZXNBcHAvZ3JhZGVzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvbWF0dGFrdnNoaS9Eb2N1bWVudHMvVnVlIHByb2plY3QvU01MYWJQcm9qZWN0L09sZEdyYWRlc0FwcC9ncmFkZXMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCi8qKg0KICog0KDQtdCw0LvQuNC30LDRhtC40Y8gSFRUUC3QutC70LjQtdC90YLQsCAo0LLQvNC10YHRgtC+IGF4aW9zKS4NCiAqINC80LXRgtC+0LTRizogZ2V0LCBwb3N0LCBwdXQsIGRlbGV0ZQ0KICogQHRoaXMgYmFzZVVybCAtINCx0LDQt9C+0LLRi9C5IHVybCAtIGFwaS8ocmVzdCBycGMgY3Vyc29yKS9zY2hlbWEvcGFja2FnZS8NCiAqIEB0aGlzIGxvYWRpbmdNYXNrIC0g0YTQu9Cw0LMsINCy0LrQuy/QstGL0LrQuyDQvNCw0YHQutGDDQogKi8KaW1wb3J0IHN0b3JlIGZyb20gJ0Avc3RvcmUnOwp2YXIgSU5JVCA9IHsKICBoZWFkZXJzOiB7CiAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCIKICB9Cn07Cgp2YXIgUmVxdWVzdEV4ZWN1dG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvL1RPRE86IENhbmNlbCByZXF1ZXN0CiAgZnVuY3Rpb24gUmVxdWVzdEV4ZWN1dG9yKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3RFeGVjdXRvcik7CgogICAgdGhpcy5iYXNlVXJsID0gIiI7CiAgICB0aGlzLmxvYWRpbmdNYXNrID0gdHJ1ZTsgLy/QvtGC0LrQu9GO0YfQsNGC0YwsINC10YHQu9C4INC90LUg0YLRgNC10LHRg9C10YLRgdGPINCz0LvQvtCx0LDQu9GM0L3QsNGPINC80LDRgdC60LAKCiAgICBjb25zb2xlLmluZm8oIlJlcXVlc3QgRXhlY3V0b3IgSW5pdCEiKTsKICB9CiAgLyoqDQogICAqIEdFVA0KICAgKg0KICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgKiBAcGFyYW0ge251bWJlcn0gY29kZSDQmtC+0LQsINC10YHQu9C4INC10YHRgtGMLg0KICAgKiBAcmV0dXJuIHtQcm9taXNlfQ0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhSZXF1ZXN0RXhlY3V0b3IsIFt7CiAgICBrZXk6ICJnZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldCh1cmwsIGNvZGUpIHsKICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShjb2RlID8gdXJsICsgIi8iICsgY29kZSA6IHVybCwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAiR0VUIgogICAgICB9KSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBQT1NUDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhINCe0LHRitC10LrRgiDRgSDQtNCw0L3QvdGL0LzQuC4g0JHRg9C00LXRgiDQv9C+0LzQtdGJ0ZHQvSDQsiDRgtC10LvQviDQt9Cw0L/RgNC+0YHQsC4NCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJwb3N0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0KHVybCwgZGF0YSkgewogICAgICByZXR1cm4gdGhpcy5leGVjdXRlKHVybCwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAiUE9TVCIKICAgICAgfSksIGRhdGEpOwogICAgfQogICAgLyoqDQogICAgICogUFVUDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlINCa0L7QtC4NCiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSDQntCx0YrQtdC60YIg0YEg0LTQsNC90L3Ri9C80LguINCR0YPQtNC10YIg0L/QvtC80LXRidGR0L0g0LIg0YLQtdC70L4g0LfQsNC/0YDQvtGB0LAuDQogICAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicHV0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwdXQodXJsLCBjb2RlLCBkYXRhKSB7CiAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUodXJsICsgIi8iICsgY29kZSwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAiUFVUIgogICAgICB9KSwgZGF0YSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBERUxFVEUNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgRW5kcG9pbnQuDQogICAgICogQHBhcmFtIHtudW1iZXJ9IGNvZGUg0JrQvtC0Lg0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSh1cmwsIGNvZGUpIHsKICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh1cmwgKyAiLyIgKyBjb2RlLCBmYWxzZSwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBJTklUKSwge30sIHsKICAgICAgICBtZXRob2Q6ICJERUxFVEUiCiAgICAgIH0pKTsKICAgIH0KICAgIC8qKg0KICAgICAqIEVYRUNVVEUNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgRW5kcG9pbnQuDQogICAgICogQHBhcmFtIHtib29sZWFufSBleGFjdCDQvdC1INC/0L7QtNGB0YLQsNCy0LvRj9GC0YwgYmFzZVVybA0KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbml0INC/0LDRgNCw0LzQtdGC0YDRiyDQt9Cw0L/RgNC+0YHQsA0KICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhINGC0LXQu9C+INC30LDQv9GA0L7RgdCwDQogICAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZXhlY3V0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2V4ZWN1dGUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodXJsLCBleGFjdCwgaW5pdCwgZGF0YSkgewogICAgICAgIHZhciBsb2NhdGlvbiwgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKHRoaXMubG9hZGluZ01hc2spIHN0b3JlLmNvbW1pdCgic2V0SXNMb2FkaW5nIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIGlmIChkYXRhKSBpbml0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpbml0KSwge30sIHsKICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbG9jYXRpb24gPSBleGFjdCA/IHVybCA6IHRoaXMuYmFzZVVybCArIHVybDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGxvY2F0aW9uLCBpbml0KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dC5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfY29udGV4dC50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBzdG9yZS5jb21taXQoInNldElzTG9hZGluZyIsIGZhbHNlKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMTYpOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1sxLCAxMiwgMTYsIDE5XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBleGVjdXRlKF94LCBfeDIsIF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF9leGVjdXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBleGVjdXRlOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gUmVxdWVzdEV4ZWN1dG9yOwp9KCk7CgpleHBvcnQgZGVmYXVsdCBuZXcgUmVxdWVzdEV4ZWN1dG9yKCk7"},{"version":3,"sources":["/home/mattakvshi/Documents/Vue project/SMLabProject/OldGradesApp/grades/src/services/RequestExecutor.js"],"names":["store","INIT","headers","RequestExecutor","baseUrl","loadingMask","console","info","url","code","execute","method","data","exact","init","commit","body","JSON","stringify","location","fetch","response","json","error","Error"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,IAAMC,IAAI,GAAG;AACTC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AADA,CAAb;;IAMMC,e;AACF;AACA,6BAAc;AAAA;;AACV,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmB,IAAnB,CAFU,CAEe;;AACzBC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,aAAIC,GAAJ,EAASC,IAAT,EAAe;AAAC,aAAO,KAAKC,OAAL,CAAcD,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYC,IAAf,GAAsBD,GAAxC,EAA8C,KAA9C,kCAAyDP,IAAzD;AAA+DU,QAAAA,MAAM,EAAE;AAAvE,SAAP;AAAuF;AAEvG;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,cAAKH,GAAL,EAAUI,IAAV,EAAgB;AAAC,aAAO,KAAKF,OAAL,CAAaF,GAAb,EAAkB,KAAlB,kCAA6BP,IAA7B;AAAmCU,QAAAA,MAAM,EAAE;AAA3C,UAAoDC,IAApD,CAAP;AAAkE;AAEnF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,aAAIJ,GAAJ,EAASC,IAAT,EAAeG,IAAf,EAAqB;AAAC,aAAO,KAAKF,OAAL,CAAaF,GAAG,GAAG,GAAN,GAAYC,IAAzB,EAA+B,KAA/B,kCAA0CR,IAA1C;AAAgDU,QAAAA,MAAM,EAAE;AAAxD,UAAgEC,IAAhE,CAAP;AAA8E;AAEpG;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAOJ,GAAP,EAAYC,IAAZ,EAAkB;AAAC,aAAO,KAAKC,OAAL,CAAaF,GAAG,GAAG,GAAN,GAAYC,IAAzB,EAA+B,KAA/B,kCAA0CR,IAA1C;AAAgDU,QAAAA,MAAM,EAAE;AAAxD,SAAP;AAA2E;AAG9F;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6EAEI,iBAAcH,GAAd,EAAmBK,KAAnB,EAA0BC,IAA1B,EAAgCF,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,oBAAG,KAAKP,WAAR,EAAqBL,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6B,IAA7B;AADzB;AAIQ,oBAAGH,IAAH,EAASE,IAAI,mCAAOA,IAAP;AAAaE,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAAnB,kBAAJ;AAEHO,gBAAAA,QANd,GAMyBN,KAAK,GAAGL,GAAH,GAAS,KAAKJ,OAAL,GAAeI,GANtD;AAAA;AAAA,uBAO+BY,KAAK,CAACD,QAAD,EAAWL,IAAX,CAPpC;;AAAA;AAOcO,gBAAAA,QAPd;AAAA;AAAA,uBAUqBA,QAAQ,CAACC,IAAT,EAVrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQhB,gBAAAA,OAAO,CAACiB,KAAR;AAbR,sBAcc,IAAIC,KAAJ,aAdd;;AAAA;AAAA;AAiBQxB,gBAAAA,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6B,KAA7B;AAjBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAsBJ,eAAe,IAAIZ,eAAJ,EAAf","sourcesContent":["/**\r\n * Реализация HTTP-клиента (вместо axios).\r\n * методы: get, post, put, delete\r\n * @this baseUrl - базовый url - api/(rest rpc cursor)/schema/package/\r\n * @this loadingMask - флаг, вкл/выкл маску\r\n */\r\nimport store from '@/store'\r\n\r\nconst INIT = {\r\n    headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\"\r\n    }\r\n};\r\n\r\nclass RequestExecutor {\r\n    //TODO: Cancel request\r\n    constructor() {\r\n        this.baseUrl = \"\";\r\n        this.loadingMask = true; //отключать, если не требуется глобальная маска\r\n        console.info(\"Request Executor Init!\");\r\n    }\r\n\r\n    /**\r\n     * GET\r\n     *\r\n     * @param {string} url Endpoint.\r\n     * @param {number} code Код, если есть.\r\n     * @return {Promise}\r\n     */\r\n    get(url, code) {return this.execute((code ? url + \"/\" + code : url), false, {...INIT, method: \"GET\"});}\r\n\r\n    /**\r\n     * POST\r\n     *\r\n     * @param {string} url Endpoint.\r\n     * @param {object} data Объект с данными. Будет помещён в тело запроса.\r\n     * @return {Promise}\r\n     */\r\n    post(url, data) {return this.execute(url, false, {...INIT, method: \"POST\"}, data);}\r\n\r\n    /**\r\n     * PUT\r\n     *\r\n     * @param {string} url Endpoint.\r\n     * @param {number} code Код.\r\n     * @param {object} data Объект с данными. Будет помещён в тело запроса.\r\n     * @return {Promise}\r\n     */\r\n    put(url, code, data) {return this.execute(url + \"/\" + code, false, {...INIT, method: \"PUT\"}, data);}\r\n\r\n    /**\r\n     * DELETE\r\n     *\r\n     * @param {string} url Endpoint.\r\n     * @param {number} code Код.\r\n     * @return {Promise}\r\n     */\r\n    delete(url, code) {return this.execute(url + \"/\" + code, false, {...INIT, method: \"DELETE\"});}\r\n\r\n    \r\n    /**\r\n     * EXECUTE\r\n     *\r\n     * @param {string} url Endpoint.\r\n     * @param {boolean} exact не подставлять baseUrl\r\n     * @param {object} init параметры запроса\r\n     * @param {object} data тело запроса\r\n     * @return {Promise}\r\n     */\r\n    \r\n    async execute(url, exact, init, data) {\r\n        if(this.loadingMask) store.commit(\"setIsLoading\", true);\r\n\r\n        try {\r\n            if(data) init = {...init, body: JSON.stringify(data)};\r\n\r\n            const location = exact ? url : this.baseUrl + url;\r\n            const response = await fetch(location, init);\r\n            //if(!response.ok) throw new Error(\"Network error!\");\r\n\r\n            return await response.json();\r\n\r\n        } catch(error) {\r\n            console.error(error);\r\n            throw new Error(error);\r\n\r\n        } finally {\r\n            store.commit(\"setIsLoading\", false);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new RequestExecutor();"]}]}