{"remainingRequest":"C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\src\\services\\RequestExecutor.js","dependencies":[{"path":"C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\src\\services\\RequestExecutor.js","mtime":1713372208366},{"path":"C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713085328547},{"path":"C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\node_modules\\babel-loader\\lib\\index.js","mtime":1713085328391},{"path":"C:\\Users\\mattakvshi\\Desktop\\SMLabProject\\project-for-SMLab\\OldGradesApp\\grades\\node_modules\\eslint-loader\\index.js","mtime":1713085330125}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL21hdHRha3ZzaGkvRGVza3RvcC9TTUxhYlByb2plY3QvcHJvamVjdC1mb3ItU01MYWIvT2xkR3JhZGVzQXBwL2dyYWRlcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIkM6L1VzZXJzL21hdHRha3ZzaGkvRGVza3RvcC9TTUxhYlByb2plY3QvcHJvamVjdC1mb3ItU01MYWIvT2xkR3JhZGVzQXBwL2dyYWRlcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzovVXNlcnMvbWF0dGFrdnNoaS9EZXNrdG9wL1NNTGFiUHJvamVjdC9wcm9qZWN0LWZvci1TTUxhYi9PbGRHcmFkZXNBcHAvZ3JhZGVzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvbWF0dGFrdnNoaS9EZXNrdG9wL1NNTGFiUHJvamVjdC9wcm9qZWN0LWZvci1TTUxhYi9PbGRHcmFkZXNBcHAvZ3JhZGVzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgovKioNCiAqINCg0LXQsNC70LjQt9Cw0YbQuNGPIEhUVFAt0LrQu9C40LXQvdGC0LAgKNCy0LzQtdGB0YLQviBheGlvcykuDQogKiDQvNC10YLQvtC00Ys6IGdldCwgcG9zdCwgcHV0LCBkZWxldGUNCiAqIEB0aGlzIGJhc2VVcmwgLSDQsdCw0LfQvtCy0YvQuSB1cmwgLSBhcGkvKHJlc3QgcnBjIGN1cnNvcikvc2NoZW1hL3BhY2thZ2UvDQogKiBAdGhpcyBsb2FkaW5nTWFzayAtINGE0LvQsNCzLCDQstC60Lsv0LLRi9C60Lsg0LzQsNGB0LrRgw0KICovCmltcG9ydCBzdG9yZSBmcm9tICdAL3N0b3JlJzsKdmFyIElOSVQgPSB7CiAgaGVhZGVyczogewogICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnCiAgfQp9OwoKdmFyIFJlcXVlc3RFeGVjdXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLy9UT0RPOiBDYW5jZWwgcmVxdWVzdAogIGZ1bmN0aW9uIFJlcXVlc3RFeGVjdXRvcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXF1ZXN0RXhlY3V0b3IpOwoKICAgIHRoaXMuYmFzZVVybCA9ICcnOwogICAgdGhpcy5sb2FkaW5nTWFzayA9IHRydWU7IC8v0L7RgtC60LvRjtGH0LDRgtGMLCDQtdGB0LvQuCDQvdC1INGC0YDQtdCx0YPQtdGC0YHRjyDQs9C70L7QsdCw0LvRjNC90LDRjyDQvNCw0YHQutCwCgogICAgY29uc29sZS5pbmZvKCdSZXF1ZXN0IEV4ZWN1dG9yIEluaXQhJyk7CiAgfQogIC8qKg0KICAgKiBHRVQNCiAgICoNCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBFbmRwb2ludC4NCiAgICogQHBhcmFtIHtudW1iZXJ9IGNvZGUg0JrQvtC0LCDQtdGB0LvQuCDQtdGB0YLRjC4NCiAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoUmVxdWVzdEV4ZWN1dG9yLCBbewogICAga2V5OiAiZ2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQodXJsLCBjb2RlKSB7CiAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoY29kZSA/IHVybCArICcvJyArIGNvZGUgOiB1cmwsIGZhbHNlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIElOSVQpLCB7fSwgewogICAgICAgIG1ldGhvZDogJ0dFVCcKICAgICAgfSkpOwogICAgfQogICAgLyoqDQogICAgICogUE9TVA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBFbmRwb2ludC4NCiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSDQntCx0YrQtdC60YIg0YEg0LTQsNC90L3Ri9C80LguINCR0YPQtNC10YIg0L/QvtC80LXRidGR0L0g0LIg0YLQtdC70L4g0LfQsNC/0YDQvtGB0LAuDQogICAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicG9zdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdCh1cmwsIGRhdGEpIHsKICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh1cmwsIGZhbHNlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIElOSVQpLCB7fSwgewogICAgICAgIG1ldGhvZDogJ1BPU1QnCiAgICAgIH0pLCBkYXRhKTsKICAgIH0KICAgIC8qKg0KICAgICAqIFBVVA0KICAgICAqDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBFbmRwb2ludC4NCiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29kZSDQmtC+0LQuDQogICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEg0J7QsdGK0LXQutGCINGBINC00LDQvdC90YvQvNC4LiDQkdGD0LTQtdGCINC/0L7QvNC10YnRkdC9INCyINGC0LXQu9C+INC30LDQv9GA0L7RgdCwLg0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogInB1dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHV0KHVybCwgY29kZSwgZGF0YSkgewogICAgICByZXR1cm4gdGhpcy5leGVjdXRlKHVybCArICcvJyArIGNvZGUsIGZhbHNlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIElOSVQpLCB7fSwgewogICAgICAgIG1ldGhvZDogJ1BVVCcKICAgICAgfSksIGRhdGEpOwogICAgfQogICAgLyoqDQogICAgICogREVMRVRFDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlINCa0L7QtC4NCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZWxldGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUodXJsLCBjb2RlKSB7CiAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUodXJsICsgJy8nICsgY29kZSwgZmFsc2UsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgSU5JVCksIHt9LCB7CiAgICAgICAgbWV0aG9kOiAnREVMRVRFJwogICAgICB9KSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBFWEVDVVRFDQogICAgICoNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEVuZHBvaW50Lg0KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhhY3Qg0L3QtSDQv9C+0LTRgdGC0LDQstC70Y/RgtGMIGJhc2VVcmwNCiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5pdCDQv9Cw0YDQsNC80LXRgtGA0Ysg0LfQsNC/0YDQvtGB0LANCiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSDRgtC10LvQviDQt9Cw0L/RgNC+0YHQsA0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogImV4ZWN1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9leGVjdXRlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHVybCwgZXhhY3QsIGluaXQsIGRhdGEpIHsKICAgICAgICB2YXIgbG9jYXRpb24sIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvYWRpbmdNYXNrKSBzdG9yZS5jb21taXQoJ3NldElzTG9hZGluZycsIHRydWUpOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShkYXRhKSk7CiAgICAgICAgICAgICAgICBpZiAoZGF0YSkgaW5pdCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaW5pdCksIHt9LCB7CiAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGluaXQpOwogICAgICAgICAgICAgICAgbG9jYXRpb24gPSBleGFjdCA/IHVybCA6IHRoaXMuYmFzZVVybCArIHVybDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGxvY2F0aW9uLCBpbml0KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE0OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX2NvbnRleHQudDApOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxODsKICAgICAgICAgICAgICAgIHN0b3JlLmNvbW1pdCgnc2V0SXNMb2FkaW5nJywgZmFsc2UpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgxOCk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzEsIDE0LCAxOCwgMjFdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGUoX3gsIF94MiwgX3gzLCBfeDQpIHsKICAgICAgICByZXR1cm4gX2V4ZWN1dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGV4ZWN1dGU7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBSZXF1ZXN0RXhlY3V0b3I7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IG5ldyBSZXF1ZXN0RXhlY3V0b3IoKTs="},{"version":3,"sources":["C:/Users/mattakvshi/Desktop/SMLabProject/project-for-SMLab/OldGradesApp/grades/src/services/RequestExecutor.js"],"names":["store","INIT","headers","RequestExecutor","baseUrl","loadingMask","console","info","url","code","execute","method","data","exact","init","commit","log","JSON","stringify","body","location","fetch","response","json","error","Error"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,IAAMC,IAAI,GAAG;AACZC,EAAAA,OAAO,EAAE;AACR,oBAAgB;AADR;AADG,CAAb;;IAMMC,e;AACL;AACA,6BAAc;AAAA;;AACb,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmB,IAAnB,CAFa,CAEY;;AACzBC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;WAEC,aAAIC,GAAJ,EAASC,IAAT,EAAe;AACd,aAAO,KAAKC,OAAL,CAAaD,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYC,IAAf,GAAsBD,GAAvC,EAA4C,KAA5C,kCACHP,IADG;AAENU,QAAAA,MAAM,EAAE;AAFF,SAAP;AAIA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WAEC,cAAKH,GAAL,EAAUI,IAAV,EAAgB;AACf,aAAO,KAAKF,OAAL,CAAaF,GAAb,EAAkB,KAAlB,kCAA8BP,IAA9B;AAAoCU,QAAAA,MAAM,EAAE;AAA5C,UAAsDC,IAAtD,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAEC,aAAIJ,GAAJ,EAASC,IAAT,EAAeG,IAAf,EAAqB;AACpB,aAAO,KAAKF,OAAL,CACNF,GAAG,GAAG,GAAN,GAAYC,IADN,EAEN,KAFM,kCAGDR,IAHC;AAGKU,QAAAA,MAAM,EAAE;AAHb,UAINC,IAJM,CAAP;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WAEC,iBAAOJ,GAAP,EAAYC,IAAZ,EAAkB;AACjB,aAAO,KAAKC,OAAL,CAAaF,GAAG,GAAG,GAAN,GAAYC,IAAzB,EAA+B,KAA/B,kCAA2CR,IAA3C;AAAiDU,QAAAA,MAAM,EAAE;AAAzD,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6EAEC,iBAAcH,GAAd,EAAmBK,KAAnB,EAA0BC,IAA1B,EAAgCF,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,oBAAI,KAAKP,WAAT,EAAsBL,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6B,IAA7B;AADvB;AAIET,gBAAAA,OAAO,CAACU,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAZ;AACA,oBAAIA,IAAJ,EAAUE,IAAI,mCAAQA,IAAR;AAAcK,kBAAAA,IAAI,EAAEF,IAAI,CAACC,SAAL,CAAeN,IAAf;AAApB,kBAAJ;AACVN,gBAAAA,OAAO,CAACU,GAAR,CAAYF,IAAZ;AAEMM,gBAAAA,QARR,GAQmBP,KAAK,GAAGL,GAAH,GAAS,KAAKJ,OAAL,GAAeI,GARhD;AAAA;AAAA,uBASyBa,KAAK,CAACD,QAAD,EAAWN,IAAX,CAT9B;;AAAA;AASQQ,gBAAAA,QATR;AAAA;AAAA,uBAYeA,QAAQ,CAACC,IAAT,EAZf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcEjB,gBAAAA,OAAO,CAACkB,KAAR;AAdF,sBAeQ,IAAIC,KAAJ,aAfR;;AAAA;AAAA;AAiBEzB,gBAAAA,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6B,KAA7B;AAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAsBD,eAAe,IAAIZ,eAAJ,EAAf","sourcesContent":["/**\r\n * Реализация HTTP-клиента (вместо axios).\r\n * методы: get, post, put, delete\r\n * @this baseUrl - базовый url - api/(rest rpc cursor)/schema/package/\r\n * @this loadingMask - флаг, вкл/выкл маску\r\n */\r\nimport store from '@/store';\r\n\r\nconst INIT = {\r\n\theaders: {\r\n\t\t'Content-Type': 'application/json;charset=utf-8',\r\n\t},\r\n};\r\n\r\nclass RequestExecutor {\r\n\t//TODO: Cancel request\r\n\tconstructor() {\r\n\t\tthis.baseUrl = '';\r\n\t\tthis.loadingMask = true; //отключать, если не требуется глобальная маска\r\n\t\tconsole.info('Request Executor Init!');\r\n\t}\r\n\r\n\t/**\r\n\t * GET\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {number} code Код, если есть.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tget(url, code) {\r\n\t\treturn this.execute(code ? url + '/' + code : url, false, {\r\n\t\t\t...INIT,\r\n\t\t\tmethod: 'GET',\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * POST\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {object} data Объект с данными. Будет помещён в тело запроса.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tpost(url, data) {\r\n\t\treturn this.execute(url, false, { ...INIT, method: 'POST' }, data);\r\n\t}\r\n\r\n\t/**\r\n\t * PUT\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {number} code Код.\r\n\t * @param {object} data Объект с данными. Будет помещён в тело запроса.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tput(url, code, data) {\r\n\t\treturn this.execute(\r\n\t\t\turl + '/' + code,\r\n\t\t\tfalse,\r\n\t\t\t{ ...INIT, method: 'PUT' },\r\n\t\t\tdata\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * DELETE\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {number} code Код.\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tdelete(url, code) {\r\n\t\treturn this.execute(url + '/' + code, false, { ...INIT, method: 'DELETE' });\r\n\t}\r\n\r\n\t/**\r\n\t * EXECUTE\r\n\t *\r\n\t * @param {string} url Endpoint.\r\n\t * @param {boolean} exact не подставлять baseUrl\r\n\t * @param {object} init параметры запроса\r\n\t * @param {object} data тело запроса\r\n\t * @return {Promise}\r\n\t */\r\n\r\n\tasync execute(url, exact, init, data) {\r\n\t\tif (this.loadingMask) store.commit('setIsLoading', true);\r\n\r\n\t\ttry {\r\n\t\t\tconsole.log(JSON.stringify(data))\r\n\t\t\tif (data) init = { ...init, body: JSON.stringify(data) };\r\n\t\t\tconsole.log(init)\r\n\r\n\t\t\tconst location = exact ? url : this.baseUrl + url;\r\n\t\t\tconst response = await fetch(location, init);\r\n\t\t\t//if(!response.ok) throw new Error(\"Network error!\");\r\n\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tthrow new Error(error);\r\n\t\t} finally {\r\n\t\t\tstore.commit('setIsLoading', false);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default new RequestExecutor();\r\n"]}]}